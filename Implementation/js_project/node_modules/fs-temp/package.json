{
  "_args": [
    [
      {
        "raw": "fs-temp@^1.0.0",
        "scope": null,
        "escapedName": "fs-temp",
        "name": "fs-temp",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/raviwoods/Google_Drive/ICComp/Uni_Year_3/Project/cpp-analysis-for-education/Implementation/js_project/node_modules/appdmg"
    ]
  ],
  "_from": "fs-temp@>=1.0.0 <2.0.0",
  "_id": "fs-temp@1.1.2",
  "_inCache": true,
  "_location": "/fs-temp",
  "_nodeVersion": "0.10.44",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/fs-temp-1.1.2.tgz_1478074972040_0.7731479753274471"
  },
  "_npmUser": {
    "name": "linusu",
    "email": "linus@folkdatorn.se"
  },
  "_npmVersion": "2.15.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fs-temp@^1.0.0",
    "scope": null,
    "escapedName": "fs-temp",
    "name": "fs-temp",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/appdmg"
  ],
  "_resolved": "https://registry.npmjs.org/fs-temp/-/fs-temp-1.1.2.tgz",
  "_shasum": "cc52f038bbefe510f6bcd09ec592b79d0f69253f",
  "_shrinkwrap": null,
  "_spec": "fs-temp@^1.0.0",
  "_where": "/Users/raviwoods/Google_Drive/ICComp/Uni_Year_3/Project/cpp-analysis-for-education/Implementation/js_project/node_modules/appdmg",
  "author": {
    "name": "Linus Unnebäck",
    "email": "linus@folkdatorn.se"
  },
  "bugs": {
    "url": "https://github.com/LinusU/fs-temp/issues"
  },
  "dependencies": {
    "random-path": "^0.1.0"
  },
  "description": "`fs-temp` is a quick and simple way to create temporary files and directories.",
  "devDependencies": {
    "mocha": "^2.2.5",
    "standard": "^5.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "cc52f038bbefe510f6bcd09ec592b79d0f69253f",
    "tarball": "https://registry.npmjs.org/fs-temp/-/fs-temp-1.1.2.tgz"
  },
  "files": [
    "index.js",
    "promise.js",
    "lib/"
  ],
  "gitHead": "a01fa11f8f30a23f12937e4f3adab5bce0fdc1c9",
  "homepage": "https://github.com/LinusU/fs-temp#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "linusu",
      "email": "linus@folkdatorn.se"
    }
  ],
  "name": "fs-temp",
  "optionalDependencies": {},
  "readme": "\n# fs-temp\n\n`fs-temp` is a quick and simple way to create temporary files and directories.\n\nWhy another one? I know that there are already libraries doing similar things,\nbut I felt that their implementation was unnecessary complicated. I also wanted\na quick way to turn a buffer into a file.\n\n## Installation\n\n```sh\nnpm install --save fs-temp\n```\n\n## Usage\n\n```js\nvar temp = requrie('fs-temp')\n\nvar data = new Buffer('testing 1 2 3')\nvar path = temp.writeFileSync(data)\n\n// `path` now holds the path to a file with the specified `data`\n```\n\n```js\nvar temp = require('fs-temp')\n\nvar path = temp.template('linusu-%s').mkdirSync()\n\n// `path` now holds the path to a directory with the prefix 'linusu-'\n```\n\n## Promise support\n\nIf you require `fs-temp/promise` you'll receive an alternative API where all\nfunctions that takes callbacks are replaced by `Promise`-returning functions.\n\n```js\nvar temp = require('fs-temp/promise')\n\nvar data = new Buffer('testing 1 2 3')\n\ntemp.writeFile(data).then(path => {\n  // `path` now holds the path to a file with the specified `data`\n})\n```\n\n## API\n\nThe api mimics the one provided by `fs` very closely.\n\n### `.open(flags[, mode], callback)`\n\nAsynchronous file open.\n\n`flags` is either `'w'` (only writing) or `'w+'` (writing and reading).\n\nThe callback gets two arguments `(err, obj)`. `obj` has `fd` and `path`.\n\n### `.openSync(flags[, mode])`\n\nSynchronous version of `.open()`, returns `obj` with `fd` and `path`.\n\n### `.mkdir([mode, ]callback)`\n\nCreates an empty directory.\n\nThe callback gets two arguments `(err, path)`.\n\n### `.mkdirSync([mode])`\n\nSynchronous version of `.mkdir()`, returns `path`.\n\n### `.writeFile(data[, encoding], callback)`\n\nAsynchronously writes data to a file. `data` can be a string or a buffer. The\n`encoding` argument is ignored if `data` is a buffer. It defaults to `'utf8'`.\n\nThe callback gets two arguments `(err, path)`.\n\n### `.writeFileSync(data[, encoding])`\n\nSynchronous version of `.writeFileSync()`, returns `path`.\n\n### `.createWriteStream([options])`\n\nCreates and returns a `fs.WriteStream` that will write it's content to a\ntemporary file. It differs from the standard `WriteStream` in the following\nways.\n\n - An event named `path` will be emitted with the path to the file before the\n   `open` event is emitted.\n - The property `path` will be `null` until the `path` event is emitted.\n\n### `.template(template)`\n\nReturns a copy of the module that uses the specified `template` when generating\nfile names. `template` should be a string where `%s` will be replaced with some\nrandom characters (e.g. `'linusu-%s'`).\n\nThe string should contain `%s` exactly once. If you want to include a literal\npercent sign, escape it with another one, e.g. `'%%string'` becomes `'%string'`.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Linus Unnebäck\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/LinusU/fs-temp.git"
  },
  "scripts": {
    "test": "standard && mocha"
  },
  "version": "1.1.2"
}
